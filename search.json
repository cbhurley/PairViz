[{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"cancer-treatment-groups","dir":"Articles","previous_headings":"","what":"Cancer treatment groups","title":"Multiple comparisons with PairViz","text":"Patients advanced cancers stomach, bronchus, colon, ovary breast treated ascorbate. Interest lies understanding whether patient survival time (days, seems) different depending organ affected cancer. Boxplots cancer survival times :  Taking square roots make data look little less asymmetric.","code":"suppressPackageStartupMessages(library(PairViz)) data(cancer)  # Need this step to load the data str(cancer)   # Summary of structure of the data #> 'data.frame':    64 obs. of  2 variables: #>  $ Survival: int  124 42 25 45 412 51 1112 46 103 876 ... #>  $ Organ   : Factor w/ 5 levels \"Breast\",\"Bronchus\",..: 5 5 5 5 5 5 5 5 5 5 ... # We can separate the survival times by which organ is affected organs <- with(cancer, split(Survival, Organ)) # And record their names for use later! organNames <- names(organs) # the structure of the organs data str(organs) #> List of 5 #>  $ Breast  : int [1:11] 1235 24 1581 1166 40 727 3808 791 1804 3460 ... #>  $ Bronchus: int [1:17] 81 461 20 450 246 166 63 64 155 859 ... #>  $ Colon   : int [1:17] 248 377 189 1843 180 537 519 455 406 365 ... #>  $ Ovary   : int [1:6] 1234 89 201 356 2970 456 #>  $ Stomach : int [1:13] 124 42 25 45 412 51 1112 46 103 876 ... library(colorspace) cols <- rainbow_hcl(5, c = 50)  # choose chromaticity of 50 to dull colours boxplot(organs, col=cols,          ylab=\"Survival time\",          main=\"Cancer treated by vitamin C\") # Split the data sqrtOrgans <- with(cancer, split(sqrt(Survival), Organ)) boxplot(sqrtOrgans, col=cols,          ylab=expression(sqrt(\"Survival time\")),          main=\"Cancer treated by vitamin C\")"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"layout-via-graph-structure","dir":"Articles","previous_headings":"","what":"Layout via graph structure","title":"Multiple comparisons with PairViz","text":"Suppose like compare every organ type every . find order, need find Eulerian complete graph \\(k=5\\) nodes. can found PairViz function eulerian() follows: can use constructed ord vectors form boxplots:  Every pair comparisons appear adjacently one another. also taken care assign cancer type colour across boxplots. Note Eulerian order show organs (colours) first five boxplots. , one Hamiltonian followed another. Hamiltonian required, replace ord plot ","code":"ord <- eulerian(5) ord #>  [1] 1 2 3 1 4 2 5 3 4 5 1 boxplot(sqrtOrgans[ord], col=cols[ord],          ylab=expression(sqrt(\"Survival time\")),          main=\"Cancer treated by vitamin C\", cex.axis=.6) ordHam <-  hpaths(5, matrix = FALSE) ordHam #>  [1] 1 2 3 5 4 1 3 4 2 5 1"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"pairwise-tests","dir":"Articles","previous_headings":"","what":"Pairwise tests","title":"Multiple comparisons with PairViz","text":", example, run statistical test comparing pair use observed significance level test. Suppose test equality pairwise means (assuming normal distributions course). function R accomplishes (corrects p-values simultaneity, though doesn’t matter purpose simply ordering) pairwise.t.test. can see testing hypothesis mean \\(\\sqrt{Survival}\\) identical colon cancer breast cancer, observed significance level (“p-value”) 0.023. low value indicates evidence hypothesis means identical. Note shape output (compare row names column names). require little work put useful form. goal construct symmetric matrix entry p-value comparing two groups. edge2dist utility function PairViz converts values input vector dist. matrix labelled rows columns useful us: Check weight values correctly correspond p-values. Imagine graph, boxplots (organs) nodes, edges comparisons. assign weights edges graph identical significance levels.","code":"# Get the test results test <- with(cancer,              pairwise.t.test(sqrt(Survival), Organ)) pvals <- test$p.value pvals #>            Breast Bronchus  Colon  Ovary #> Bronchus 0.000242       NA     NA     NA #> Colon    0.023008   0.5087     NA     NA #> Ovary    0.751431   0.1703 0.7514     NA #> Stomach  0.001261   0.7766 0.7514 0.2934 # First construct a vector, removing NAs. weights <- pvals[!is.na(pvals)] weights <-edge2dist(weights) weights <- as.matrix(weights) rownames(weights) <- organNames colnames(weights)<- rownames(weights) weights #>            Breast Bronchus   Colon  Ovary  Stomach #> Breast   0.000000 0.000242 0.02301 0.7514 0.001261 #> Bronchus 0.000242 0.000000 0.50872 0.1703 0.776598 #> Colon    0.023008 0.508725 0.00000 0.7514 0.751431 #> Ovary    0.751431 0.170253 0.75143 0.0000 0.293361 #> Stomach  0.001261 0.776598 0.75143 0.2934 0.000000"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"aside-construction-and-display-of-the-graph","dir":"Articles","previous_headings":"","what":"(Aside) Construction and display of the graph","title":"Multiple comparisons with PairViz","text":"graph: plot graph igraph use  plot graph Rgraphviz use:","code":"g <- mk_complete_graph(weights) requireNamespace(\"igraph\") #> Loading required namespace: igraph igplot <- function(g,weights=FALSE,layout=igraph::layout_in_circle,                     vertex.size=60, vertex.color=\"lightblue\",...){     g <- igraph::graph_from_graphnel(as(g, \"graphNEL\"))     op <- par(mar=c(1,1,1,1))     if (weights){       ew <- round(igraph::get.edge.attribute(g,\"weight\"),3)        igraph::plot.igraph(g,layout=layout,edge.label=ew,vertex.size=vertex.size,vertex.color=vertex.color,...)     }     else     igraph::plot.igraph(g,layout=layout,vertex.size=vertex.size,vertex.color=vertex.color,...)     par(op) } igplot(g,weights=TRUE,edge.label.color=\"black\") library(Rgraphviz) ew <- round(unlist(edgeWeights(g)),3) ew <- ew[setdiff(seq(along=ew), removedEdges(g))] names(ew) <- edgeNames(g) plot(g,  \"circo\",edgeAttrs=list(label=ew))"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"visiting-edges-and-nodes","dir":"Articles","previous_headings":"","what":"Visiting edges and nodes","title":"Multiple comparisons with PairViz","text":"might ask whether path particularly useful edges can visited (whatever reason) visited every node least () total weight greedy Eulerian visits edges, arranging path low weight edges encountered early. path visits nodes exactly , choosing path whose total weight lowest. Using path low2highEulord order boxplots, get  display pairs cancers biggest differences survival times appear early sequence. arrangement help focus viewer’s attention differences survival times across organ types. Comparisons can assisted inserting visual representation pairwise difference pairs boxplots. use visualisation confidence interval difference population means, adjusted multiple comparisons, like given TukeyHSD.","code":"low2highEulord <- eulerian(weights); colnames(weights)[low2highEulord] #>  [1] \"Bronchus\" \"Breast\"   \"Stomach\"  \"Ovary\"    \"Bronchus\" \"Colon\"    #>  [7] \"Breast\"   \"Ovary\"    \"Colon\"    \"Stomach\"  \"Bronchus\" ## or equivalently eulerian(g) #>  [1] \"Bronchus\" \"Breast\"   \"Stomach\"  \"Ovary\"    \"Bronchus\" \"Colon\"    #>  [7] \"Breast\"   \"Ovary\"    \"Colon\"    \"Stomach\"  \"Bronchus\" bestHam <- order_best(weights) colnames(weights)[bestHam] #> [1] \"Colon\"    \"Breast\"   \"Bronchus\" \"Ovary\"    \"Stomach\" boxplot(sqrtOrgans[low2highEulord], col=cols[ord],          ylab=expression(sqrt(\"Survival time\")),          main=\"Cancer treated by vitamin C\", cex.axis=.6)"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"multiple-comparisons-with-tukeys-hsd","dir":"Articles","previous_headings":"","what":"Multiple comparisons with Tukey’s HSD","title":"Multiple comparisons with PairViz","text":"First carry anova analysis comparing groups. TukeyHSD() results give confidence intervals comparing population means, p-values pairwise tests. p-values slightly different pairwise.t.test() method correction pairwise comparison different. may also used form graph, Eulerian favours low weights: cases Eulerian calculated TukeyHSD p-values coincides pairwise.t.test results. can also plot Tukey confidence intervals using  wish construct plot includes boxplots survival times group pairs adjacent , confidence visualisation pair boxplots.","code":"aovOrgans <-  aov(sqrt(Survival) ~ Organ,data=cancer) TukeyHSD(aovOrgans,conf.level = 0.95) #>   Tukey multiple comparisons of means #>     95% family-wise confidence level #>  #> Fit: aov(formula = sqrt(Survival) ~ Organ, data = cancer) #>  #> $Organ #>                     diff     lwr    upr  p adj #> Bronchus-Breast  -19.993 -32.265 -7.720 0.0002 #> Colon-Breast     -13.566 -25.839 -1.293 0.0232 #> Ovary-Breast      -7.622 -23.718  8.475 0.6724 #> Stomach-Breast   -18.809 -31.802 -5.816 0.0013 #> Colon-Bronchus     6.427  -4.452 17.305 0.4647 #> Ovary-Bronchus    12.371  -2.690 27.432 0.1558 #> Stomach-Bronchus   1.184 -10.502 12.869 0.9985 #> Ovary-Colon        5.944  -9.116 21.005 0.8003 #> Stomach-Colon     -5.243 -16.928  6.443 0.7148 #> Stomach-Ovary    -11.187 -26.841  4.466 0.2735 tuk <-TukeyHSD(aovOrgans,conf.level = 0.95) ptuk <- tuk$Organ[,\"p adj\"] dtuk <- as.matrix(edge2dist(ptuk)) rownames(dtuk)<- colnames(dtuk)<- organNames g <- mk_complete_graph(weights) eulerian(dtuk) #>  [1] 2 1 5 4 2 3 1 4 3 5 2 par(mar=c(3,8,3,3)) plot(TukeyHSD(aovOrgans,conf.level = 0.95),las=1,tcl = -.3)"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"boxplots-with-pairwise-testing-vitamin-c","dir":"Articles","previous_headings":"","what":"Boxplots With Pairwise Testing: Vitamin C","title":"Multiple comparisons with PairViz","text":"PairViz, provide function mcplots() interleaves group boxplots confidence interval visualisation:  features plot boxplots ordered using Eulerian TukeyHSD p-values, computed aovOrgans. default boxplots variable width, reflecting group sizes. See documentation parameter varwidth adjust . gray vertical strip pair boxplots depicts HSD confidence interval diference means distributions two boxplots. circle middle gray strip point estimate difference means axis left hand side refers boxplots, right hand axis refers confidence intervals. Three levels confidence depicted gray strips. light grey part shows 90% interval. Moving include mid-gray section gives 95% interval. Including dark gray section gives 99% confidence interval. confidence levels displayed intervals controlled levels parameter mc_plot(). horizontal gray line segments shows zero value right hand confidence interval axis. Confidence intervals intersect zero axis represent comparisons whose p-values less 0.01. red arrows depict comparisons confidence interval intersect zero axis. Longer arrows mean greater significance, .e. smaller p-values. Suppose wish use mc_plot depict confidence intervals given TukeyHSD. possible, can construct matrix necessary information, , first column estimate, followed lower upper confidence bounds number confidence levels. case, required order supplied path input.  Without family-wise correction, Breast-Colon comparison also significant.","code":"mc_plot(sqrtOrgans,aovOrgans,main=\"Pairwise comparisons of cancer types\",          ylab=\"Sqrt Survival\",col=cols,cex.axis=.6) suppressPackageStartupMessages(library(multcomp)) fitVitC <- glht(aovOrgans, linfct = mcp(Organ= \"Tukey\"))  # this gives confidence intervals without a family correction confint(fitVitC,level=.99,calpha = univariate_calpha()) #>  #>   Simultaneous Confidence Intervals #>  #> Multiple Comparisons of Means: Tukey Contrasts #>  #>  #> Fit: aov(formula = sqrt(Survival) ~ Organ, data = cancer) #>  #> Quantile = 2.662 #> 99% confidence level #>   #>  #> Linear Hypotheses: #>                         Estimate lwr     upr     #> Bronchus - Breast == 0  -19.993  -31.602  -8.384 #> Colon - Breast == 0     -13.566  -25.175  -1.957 #> Ovary - Breast == 0      -7.622  -22.848   7.604 #> Stomach - Breast == 0   -18.809  -31.100  -6.518 #> Colon - Bronchus == 0     6.427   -3.864  16.717 #> Ovary - Bronchus == 0    12.371   -1.875  26.617 #> Stomach - Bronchus == 0   1.184   -9.870  12.237 #> Ovary - Colon == 0        5.944   -8.302  20.191 #> Stomach - Colon == 0     -5.243  -16.296   5.811 #> Stomach - Ovary == 0    -11.187  -25.994   3.620  # for short, define cifunction<- function(f, lev)    confint(f,level=lev,calpha = univariate_calpha())$confint  # calculate the confidence intervals conf <- cbind(cifunction(fitVitC,.9),cifunction(fitVitC,.95)[,-1],cifunction(fitVitC,.99)[,-1])   mc_plot(sqrtOrgans,conf,path=low2highEulord,         main=\"Pairwise comparisons of cancer types\",          ylab=\"Sqrt Survival\",col=cols,cex.axis=.6)"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"subsets-of-comparisons-mice-diets","dir":"Articles","previous_headings":"","what":"Subsets of comparisons: Mice Diets","title":"Multiple comparisons with PairViz","text":"Female mice randomly assigned six treatment groups investigate whether restricting dietary intake increases life expectancy. data available Plot data:  6 treatment groups 15 pairwise comparisons, five comparisons particular interest. N/R50 vs N/N85, R/R50 vs N/R50, N/R40 vs N/R50, lopro vs N/R50 N/N85 vs NP. See documentation case0501 details. analysis follows given documentation case0501. Four five comparisons significant.","code":"if (!requireNamespace(\"Sleuth3\", quietly = TRUE)){     install.packages(\"Sleuth3\") } library(Sleuth3) mice <- case0501 str(mice) #> 'data.frame':    349 obs. of  2 variables: #>  $ Lifetime: num  35.5 35.4 34.9 34.8 33.8 33.5 32.6 32.4 31.8 31.6 ... #>  $ Diet    : Factor w/ 6 levels \"N/N85\",\"N/R40\",..: 4 4 4 4 4 4 4 4 4 4 ... levels(mice$Diet) #> [1] \"N/N85\" \"N/R40\" \"N/R50\" \"NP\"    \"R/R50\" \"lopro\" # get rid of \"/\" levels(mice$Diet) <-  c(\"NN85\", \"NR40\", \"NR50\", \"NP\" ,   \"RR50\" ,\"lopro\") life <- with(mice, split(Lifetime ,Diet)) cols <- rainbow_hcl(6, c = 50)  boxplot(life, col=cols,          ylab=\"Lifetime\",          main=\"Diet Restriction and Longevity\") aovMice   <- aov(Lifetime ~ Diet-1, data=mice) fitMice <- glht(aovMice,           linfct=c(\"DietNR50 - DietNN85 = 0\",            \"DietRR50  - DietNR50 = 0\",           \"DietNR40  - DietNR50 = 0\",           \"Dietlopro - DietNR50 = 0\",           \"DietNN85  - DietNP   = 0\"))    summary(fitMice,test=adjusted(\"none\")) # No multiple comparison adjust. #>  #>   Simultaneous Tests for General Linear Hypotheses #>  #> Fit: aov(formula = Lifetime ~ Diet - 1, data = mice) #>  #> Linear Hypotheses: #>                           Estimate Std. Error t value Pr(>|t|)     #> DietNR50 - DietNN85 == 0     9.606      1.188    8.09  1.1e-14 *** #> DietRR50 - DietNR50 == 0     0.589      1.194    0.49    0.622     #> DietNR40 - DietNR50 == 0     2.819      1.171    2.41    0.017 *   #> Dietlopro - DietNR50 == 0   -2.611      1.194   -2.19    0.029 *   #> DietNN85 - DietNP == 0       5.289      1.301    4.07  5.9e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> (Adjusted p values reported -- none method)   confint(fitMice, calpha = univariate_calpha()) # No adjustment #>  #>   Simultaneous Confidence Intervals #>  #> Fit: aov(formula = Lifetime ~ Diet - 1, data = mice) #>  #> Quantile = 1.967 #> 95% confidence level #>   #>  #> Linear Hypotheses: #>                           Estimate lwr    upr    #> DietNR50 - DietNN85 == 0   9.606    7.270 11.942 #> DietRR50 - DietNR50 == 0   0.589   -1.759  2.936 #> DietNR40 - DietNR50 == 0   2.819    0.516  5.123 #> Dietlopro - DietNR50 == 0 -2.611   -4.959 -0.264 #> DietNN85 - DietNP == 0     5.289    2.730  7.848"},{"path":"https://cbhurley.github.io/PairViz/articles/MultipleComparisons.html","id":"boxplots-with-pairwise-testing-mice-diets","dir":"Articles","previous_headings":"","what":"Boxplots With Pairwise Testing: Mice Diets","title":"Multiple comparisons with PairViz","text":"goal construct multiple comparisons boxplot showing confidence intervals comparisons interest, calculated . First make graph whose nodes diets. graph edges. Next add edges comparisons interest, whose weights p-values. draw graph, specified coordinates nodes via layout parameter.  graph Eulerian. possible construct path visiting every edge visit edges , insert two extra edges. Eulerian inserts extra edges NP RR50, NR40 lopro. “nicer” Eulerian might obtained new edges inserted elsewhere. new edges given weights 1, indicate associated comparisons uninteresting.  Now ready construct multiple comparisons plot.  Notice confidence intervals drawn relevant comparisons. first two comparisons 99% confidence intervals straddle zero axis. comparisons designated red arrows plot .","code":"g <- new(\"graphNEL\", nodes=names(life)) fitMiceSum <- summary(fitMice,test=adjusted(\"none\")) pvalues <- fitMiceSum$test$pvalues pvalues #>  DietNR50 - DietNN85  DietRR50 - DietNR50  DietNR40 - DietNR50  #>            1.066e-14            6.223e-01            1.659e-02  #> Dietlopro - DietNR50    DietNN85 - DietNP  #>            2.935e-02            5.949e-05 # Extract  labels from the p-values for the edges edgeLabs <- unlist(strsplit(names(pvalues), \" - \")) edgeLabs <- matrix(substring(edgeLabs,5), nrow=2) g <- addEdge(edgeLabs[1,], edgeLabs[2,], g,pvalues)  pos <- rbind(c(-1,0), c(0,-1), c(0,0), c(-2,0),c(1,0), c(0,1)) igplot(g, weights=TRUE, layout=pos,vertex.size=32) eulerian(g) #> [1] \"NR50\"  \"NN85\"  \"NP\"    \"RR50\"  \"NR50\"  \"NR40\"  \"lopro\" \"NR50\" g1 <- addEdge(\"NR40\",\"NP\",g,1) g1 <- addEdge(\"lopro\",\"RR50\",g1,1) igplot(g1, weights=TRUE, layout=pos,vertex.size=32) eulerian(g1) #> [1] \"NR50\"  \"NN85\"  \"NP\"    \"NR40\"  \"NR50\"  \"lopro\" \"RR50\"  \"NR50\" eul <- eulerian(g1) # make eul numeric eul <- match(eul, names(life))  fitMice1 <- glht(aovMice, linfct = mcp(Diet= \"Tukey\"))  # need to construct the confidence intervals for all pairs conf <- cbind(cifunction(fitMice1,.9),cifunction(fitMice1,.95)[,-1],cifunction(fitMice1,.99)[,-1]) # these comparisons are not relevant conf[c(1,4,5,7,8,9,13,14,15),]<- NA  mc_plot(life,conf,path=eul,         main=\"Diet Restriction and Longevity\",          ylab=\"Lifetime\",col=cols,cex.axis=.6)"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"pairviz-installation","dir":"Articles","previous_headings":"","what":"PairViz installation","title":"Introduction to PairViz","text":"PairViz installed CRAN usual way. PairViz uses graph data structure provided graph package located Bioconductor repository rather CRAN. install , use vignette, also show plots graph structure, requires package igraph CRAN. following utility function helpful: Alternatively, graphs may plotted using package Rgraphviz installed Bioconductor:","code":"install.packages(\"PairViz\") if (!requireNamespace(\"graph\", quietly = TRUE)){     install.packages(\"BiocManager\")     BiocManager::install(\"graph\") } requireNamespace(\"igraph\") #> Loading required namespace: igraph if (!requireNamespace(\"igraph\", quietly = TRUE)){     install.packages(\"igraph\") }   igplot <- function(g,weights=FALSE,layout=igraph::layout_in_circle,                     vertex.size=60, vertex.color=\"lightblue\",...){     g <- igraph::graph_from_graphnel(as(g, \"graphNEL\"))     op <- par(mar=c(1,1,1,1))     if (weights){       ew <- round(igraph::get.edge.attribute(g,\"weight\"),3)         igraph::plot.igraph(g,layout=layout,edge.label=ew,vertex.size=vertex.size,vertex.color=vertex.color,...)     }     else     igraph::plot.igraph(g,layout=layout,vertex.size=vertex.size,vertex.color=vertex.color,...)     par(op) } if (!requireNamespace(\"Rgraphviz\", quietly = TRUE)){     install.packages(\"BiocManager\")     BiocManager::install(\"Rgraphviz\") }  # For a graph g use plot(g)"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"graphs","dir":"Articles","previous_headings":"","what":"Graphs","title":"Introduction to PairViz","text":"graph mathematical structure made nodes, edges joining nodes. consider graphs edges undirected. cases, edges assigned weights, reflecting measure importance. complete graph graph edge connecting every pair nodes. two complete graphs, k4 four nodes k5 five nodes.","code":"suppressPackageStartupMessages(library(PairViz)) k4 <- mk_complete_graph(4) k5 <- mk_complete_graph(5) igplot(k4) igplot(k5)"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"traversing-graph-edges","dir":"Articles","previous_headings":"","what":"Traversing graph edges","title":"Introduction to PairViz","text":"first construct graph traversals visit every edge graph least . PairViz function eulerian() gives traversals: Mathematically speaking, Eulerian path graph path visits every edge graph exactly . Eulerian tour graph Eulerian path closed, .e. ends starting node. graph k5, one Eulerian tour goes 1 ->2 -> 3 -> 1 ends back node 1, given eulerian(k5). well-known graph Eulerian tour every node even number edges. condition holds complete graph odd number nodes, k5. Similarly, graph Eulerian path two nodes even number edges. remove one edge, say connecting nodes 1 2 k5, two nodes odd number edges nodes even. Eulerian k5a starts one odd nodes (“1”) visits edges ending “2”, odd node. graphs Eulerian, meet conditions Eulerian path exist. graph k4 instance, four nodes three edges. case, path visiting edges must visit edges . eulerian(k4) : look closely see edge connecting nodes “3” “4” visited twice. way think extra edges need added graph two nodes become even. k4 one extra edge needed, example extra edge connects nodes “3” “4”. summary, graph, function eulerian() returns path visiting edges least . graph Eulerian, returned path visits edge exactly . Otherwise, edges visited twice. details algorithm, see Hurley Oldford (2010, 2011).","code":"eulerian(k5) #>  [1] \"1\" \"2\" \"3\" \"1\" \"4\" \"2\" \"5\" \"3\" \"4\" \"5\" \"1\" k5a <- removeEdge(\"1\", \"2\", k5) igplot(k5a) eulerian(k5a) #>  [1] \"1\" \"3\" \"2\" \"4\" \"1\" \"5\" \"3\" \"4\" \"5\" \"2\" eulerian(k4) #> [1] \"1\" \"3\" \"2\" \"4\" \"3\" \"4\" \"1\" \"2\""},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"edge-traversal-of-a-weighted-graph","dir":"Articles","previous_headings":"","what":"Edge traversal of a weighted graph","title":"Introduction to PairViz","text":"First construct graph weighted edges. plot graph use  graph g weighted, eulerian algorithm starts edge lowest weight, proceeds visit every edge, preferring lower weight edges whenever choice edge visited next. eulerian() function called option weighted=FALSE, weights ignored. case, Eulerian path visits edges going next first available node nodes(g).","code":"n <- LETTERS[1:5] g <- new(\"graphNEL\",nodes=n) efrom <- n[c(1,1,2,2,2,4)] eto <- n[c(2:3,3:5,5)] ew <- c(8,9,5:7,1) g <- addEdge(efrom, eto, g, ew) igplot(g, weights=TRUE,edge.label.color=\"black\") eulerian(g) #> [1] \"E\" \"D\" \"B\" \"C\" \"A\" \"B\" \"E\" eulerian(g, weighted=FALSE) #> [1] \"A\" \"B\" \"D\" \"E\" \"B\" \"C\" \"A\""},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"edge-traversal-of-a-complete-graph","dir":"Articles","previous_headings":"","what":"Edge traversal of a complete graph","title":"Introduction to PairViz","text":"complete graphs, PairViz includes alternative constructions Eulerian (nearly Eulerian) paths. function eseq() uses recursive algorithm, forms path 1,..,n appending extra edges tour 1,…,(n-2). details eseq algorithm, see Hurley Oldford (2011). function eseqa() gives different sequence. odd n, tour starts 1, takes steps size 1,2,…,m repeatedly, m (n-1)/2. even n, path constructed formed eseqa(n+1), followed dropping node n+1. (Note permulation step sizes 1,2,…,m just well). Two functions kntour_drop() takes Euler tour complete graph nodes 1,2,..n input odd n, removes occurences n sequence. result nearly Eulerian path complete graph n-1 nodes. kntour_add() takes Euler tour complete graph nodes 1,2,..n input odd n, appends path joining node n+1 nodes 1,2,…,n . result nearly Eulerian path complete graph n-1 nodes.","code":""},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"edge-traversal-of-a-complete-graph-via-hamiltonian-decompositions","dir":"Articles","previous_headings":"","what":"Edge traversal of a complete graph via Hamiltonian decompositions","title":"Introduction to PairViz","text":"Hamiltonian path graph path visits every node graph exactly . general graph, determining whether path exists difficult, fact NP-hard problem. complete graph n nodes, path 1,2,…,n Hamiltonian path. Consider complete graph odd number nodes k5.  blue hamiltonian path visits nodes order 1,2,3,5,4. pink hamiltonian path visits nodes order 1,3,4,2,5. complete graph odd number nodes k5, possible construct Eulerian tour concatenating together number Hamiltonians. construction known Hamiltonian decomposition. figure , light red edge 4 1 connects two hamiltonians, remaining light red edge 5 1 connects last node pink path first node blue path complete tour. PairViz, two hamiltonian paths constructed want eulerian composed two hamiltonians, use constructions produce paths complete graphs even number nodes nearly eulerian. Look row result hpaths produces hamiltonian k6 (complete graph 6 nodes). hamiltonians concatenated, edges k6 visited. close inspection, see edges connecting rows (4-2 5-3) visted twice. need connect first node row 1 last node row 3, edge already visited. isomorphic decompositions obtained supplying first Hamiltonian argument hpaths. node labels rearranged accordingly, code snippet .","code":"ew <- rep(1, length(edgeNames(k5))) s1 <- c(1,5,9,10) ew[s1]<- 5 ec <- rep(\"grey40\", length(ew)) ec[s1]<- \"cyan\" igplot(k5, edge.width=ew, edge.color=ec)  ew[]<- 1 s2 <- c(2,6:8) ew[s2]<- 5 ec[] <- \"grey40\" ec[s2]<- \"magenta\" igplot(k5, edge.width=ew, edge.color=ec) ew[]<- 5 ec[s1]<- \"cyan\" s3 <- 3:4 ec[s3]<- \"rosybrown1\" igplot(k5, edge.width=ew, edge.color=ec) igplot(k5, edge.width=ew, edge.color=ec) hpaths(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    5    4 #> [2,]    1    3    4    2    5 hpaths(5, matrix=FALSE) #>  [1] 1 2 3 5 4 1 3 4 2 5 1 hpaths(6) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    2    6    3    5    4 #> [2,]    2    3    1    4    6    5 #> [3,]    3    4    2    5    1    6 hpaths(6, matrix=FALSE) #>  [1] 1 2 6 3 5 4 2 3 1 4 6 5 3 4 2 5 1 6 hpaths(1:5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]    1    3    5    2    4"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"edge-traversal-of-a-weighted-complete-graph-via-hamiltonian-decompositions","dir":"Articles","previous_headings":"","what":"Edge traversal of a weighted complete graph via hamiltonian decompositions","title":"Introduction to PairViz","text":"Consider complete graph k7 whose edge weights given easiest way assign weights edges use distance matrix: Now d7 symmetric matrix distances, values ew specify distances order 1-2, 1-3, …., 1-7, 2-7,…, 3-7, …,6-7.  Like hpaths(), function weighted_hpaths() finds Hamiltonians concatenated visit edges least . However weighted_hpaths() uses greedy algorithm make first Hamiltonian low weight weights increasing successive Hamiltonians. can easily calculate edge weights sum first Hamiltonian. second third Hamiltonians edges whose sums weighted_hpaths() function uses order_tsp(), TSP solver (default nearest insertion) come first Hamiltonian. algorithm uses heuristics, may find overall winner. graph just 7 nodes, possible use brute force evaluation find shortest hamiltonian tour. example, can confirm order_tsp finds shortest Hamiltonian tour. order_best computationally highly demanding, try graphs maxexact (defaults 9) nodes, sample permutations evaluated.","code":"set.seed(123) k7 <- mk_complete_graph(7) ew <- sample(numEdges(k7),numEdges(k7)) # a vector of edgeweights d7 <- matrix(0,7,7) d7[lower.tri(d7)] <- ew d7[upper.tri(d7)]<-  t(d7)[upper.tri(d7)] d7  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    0   15   19   14    3   10    2 #> [2,]   15    0    6   11    5    4   21 #> [3,]   19    6    0    9   13   18    8 #> [4,]   14   11    9    0    1   12   20 #> [5,]    3    5   13    1    0   17    7 #> [6,]   10    4   18   12   17    0   16 #> [7,]    2   21    8   20    7   16    0 # or using the shortcut function edge2dist from PairViz #d7 <- as.matrix(edge2dist(ew)) k7 <- mk_complete_graph(d7) igplot(k7, weights=TRUE,edge.label.color=\"black\", vertex.label.cex=2,vertex.size=30) # Unfortunately, plot.igraph does not show graph edge weights  automatically, you have to  # input them as above. You might want to check that the igraph # matches that of ew. igraph::E(igraph::graph_from_graphnel(k7)) #> + 21/21 edges from 20724a1 (vertex names): #>  [1] 1--2 1--3 1--4 1--5 1--6 1--7 2--3 2--4 2--5 2--6 2--7 3--4 3--5 3--6 3--7 #> [16] 4--5 4--6 4--7 5--6 5--7 6--7 weighted_hpaths(d7) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    6    2    5    4    1    7    3 #> [2,]    6    5    1    2    3    4    7 #> [3,]    6    1    3    5    7    2    4 # this version returns the eulerian weighted_hpaths(d7, matrix=FALSE) #>  [1] 4 5 7 1 6 2 3 4 1 5 2 7 3 6 4 2 1 3 5 6 7 4 o <- weighted_hpaths(d7, matrix=FALSE) o1 <- o[1:8] # include the 8th to form the tour d7e <- dist2edge(d7)  # d7e is a vector giving edge weights in order (1,1)... (1,7), (2,3),.. (2,7) etc h1weights <- path_weights(d7e, o1) # the edge weights for o1 # the same as d7[cbind(head(o1,-1), o1[-1])] #> [1]  1  3  2  8  6  4 12  h1weights #> [1]  1  3  2  8  6  4 12 sum(h1weights) #> [1] 36 o2 <- o[8:15] sum(path_weights(d7e, o2)) #> [1] 84 o3 <- o[15:22] sum(path_weights(d7e, o3)) #> [1] 111 order_best(d7,cycle=TRUE) #> [1] 4 5 1 7 3 2 6 order_tsp(d7,cycle=TRUE) #> [1] 4 5 7 1 6 2 3"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"comparisions-of-edge-traversals-on-an-unweighted-complete-graph","dir":"Articles","previous_headings":"","what":"Comparisions of edge traversals on an unweighted complete graph","title":"Introduction to PairViz","text":"Consider graph k7. stage, four algorithms forming Eulerians use weights.  plot eseq(7) coloured show recursive construction. eseq(3) tan, additional edges added eseq(5) blue, eseq(7) pink. plot eseqa(7) shows construction; edges distance 1 (tan), 2 (blue) 3 (pink) apart repeatedly, considering last node 7 first distance 1 apart. eulerian(7), edges connecting node 1 tan, edges nodes 2 3 blue excepting connecting node 1, remaining edges involving nodes 4,5, 6 7 pink. display illustrates eulerian algorithm always moves lowest available node. plot hpaths(7) three concatenated hamiltonians coloured blue, pink tan. displays, want eulerian visiting low numbered nodes first, use eseq() eulerian(). want Eulerian visits node spread , pick eseqa() hpaths(). course, Hamiltonian property important, hpaths() best choice.","code":"e1 <- eseq(7) e2 <- eseqa(7) e3 <- eulerian(7) # same path as eulerian(k7, weighted=FALSE) h1 <- hpaths(7, matrix=FALSE)"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"comparisions-of-edge-traversals-on-an-weighted-complete-graph","dir":"Articles","previous_headings":"","what":"Comparisions of edge traversals on an weighted complete graph","title":"Introduction to PairViz","text":"two different Eulerians edge-weighted k7. plotted . colouring scheme used plots eulerian(7) hpaths(7).  Recall goal traversals edge-weights graphs visit low-weight edges early path. check , can find edges weights paths using Plotting , see edge weights e4 h2 increase index increases. path based Hamiltonians less successful ordering edge weights must visit sequence Hamiltonians. edge weights first Hamiltonian blue, second magenta third tan.","code":"e4 <- eulerian(d7) # same path as eulerian(k7) h2 <- weighted_hpaths(d7, matrix=FALSE) d7e <- dist2edge(d7)  path_weights(d7e, e4) # the edge weights for e4 #>  [1]  1  3  2  7  5  4 10 14  9  6 11 12 16  8 13 17 18 19 15 21 20 path_weights(d7e, h2) # the edge weights for h2 #>  [1]  1  7  2 10  4  6  9 14  3  5 21  8 18 12 11 15 19 13 17 16 20"},{"path":"https://cbhurley.github.io/PairViz/articles/PairVizIntroduction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to PairViz","text":"C.B. Hurley R.W. Oldford, Pairwise display high dimensional information via Eulerian tours Hamiltonian decompositions. Journal Computational Graphical Statistics. 19(10), pp. 861–886, 2010. C.B. Hurley R.W. Oldford, Eulerian tour algorithms data visualization PairViz package. Computational Statistics, 26(4), pp 613–633, 2011.","code":""},{"path":"https://cbhurley.github.io/PairViz/articles/pcp.html","id":"correlation-guided-plots-of-mtcars-using-hamiltonians","dir":"Articles","previous_headings":"","what":"Correlation guided plots of mtcars using Hamiltonians","title":"Correlation and scagnostic guided parallel coordinate plots","text":"First, select six variables mtcars, make parallel coordinate plot. use variant PCP provided PairViz, function pcp.  standard PCP plot variables order appearance data frame. obvious plot instance mpg disp negatively correlated. following line segments might able see mpg hp also negatively correlated, associations variables difficult ascertain. use one eulerian functions PairViz produce orderings variables pairs variables adjacent. next display, use hpaths, gives three hamiltonians pair variables adjacent least . see mpg also strongly negatively correlated wt, hp drat, strong association mpg drat. make patterns PCP bit clearer, construct eulerian high correlation variables appear early sequence. code makes dist correlation variables. function eulerian constructs path visiting lower weight edges first (want visit high correlation variables first), form path Forming PCP based order get first three panels left hand side many parallel line segments indicative positively correlated variables. right hand side PCP, panels many high-low line segments means variables negatively correlated. PairViz augmented version PCP shows summary measures pair variables, assist interpretation. code constructs summary measures, one column positive correlations, second negative correlations. plot shows clearly correlation generally decreases left right. prefer, omit guides, instead colour panels according sign correlation.  guided_pcp function also panel.colors argument, possible keep guides also colour panels.","code":"suppressPackageStartupMessages(library(PairViz)) data <- mtcars[,c(1,3:7)] pcp(data,horizontal=TRUE,lwd=2, col=\"grey50\", main = \"Standard PCP\") o <- hpaths(1:ncol(data),matrix=FALSE) par(cex.axis=.7) pcp(data,order=o,horizontal=TRUE,lwd=2, col=\"grey50\", main = \"Hamiltonian decomposition\") corw <- as.dist(cor(data)) o <- eulerian(-corw) o #>  [1] 5 2 3 5 6 1 4 6 2 4 3 6 3 1 2 4 5 1 par(cex.axis=.7) pcp(data,order=o,horizontal=TRUE,lwd=2, col=\"grey50\", main = \"Weighted eulerian\") corw <- dist2edge(corw) edgew <- cbind(corw*(corw>0), corw*(corw<0)) par(cex.axis=.7) guided_pcp(data,edgew, path=o,pcp.col=\"grey50\" ,lwd=2,          main=\"Weighted eulerian with correlation guide\",          bar.col = c(\"lightpink1\",\"lightcyan1\"),          bar.ylim=c(-1,1),bar.axes=TRUE) pathw <-  path_weights(corw,o) corcols <- ifelse(pathw>0, \"lightpink1\", \"lightcyan\") par(cex.axis=.7) pcp(data,order=o,col=\"grey50\" ,lwd=2,          main=\"Weighted eulerian with correlation guide\",          panel.colors = corcols)"},{"path":"https://cbhurley.github.io/PairViz/articles/pcp.html","id":"scagnostic-guided-plots-of-sleep-data-using-hamiltonians","dir":"Articles","previous_headings":"","what":"Scagnostic guided plots of sleep data using Hamiltonians","title":"Correlation and scagnostic guided parallel coordinate plots","text":"access data, remove NAs, transform two highly skewed variables, give variables shortnames, set colour vector plots. Calculate scagnostics data. sc matrix whose rows values 9 scagnostics, make plots involving different scagnostics, assign colours scagnostics, consistency across plots. Define utility function returns subset scagnostics, retaining class attribute. Consider outlying scagnostic. Suppose want construct PCP, variable appearing , pairs variables high outlier score appear adjacently sequence. dOut symmetric matrix entry gives outlying score scatterplot labelled row column names. Note function edge2dist relies fact objects class scagnostics order (1,2), (1,3), (2,3),(1,4) etc find variable ordering highest (nearly highest) total outlier score use one first call order_best finds best ordering brute force evaluation 10! factorial permutations, bit slow. Without maxexact=10 input, order_best evaluates sample permulations sequences length 9. order_tsp uses TSP solver package TSP. use result first call order_best, gives guided PCP based ordering  Notice panels involving discrete-valued variables P,SE D score zero outlying index. L-GP pair variables highest outlier score two outliers evident. outlier cases two species (Human Asian Elephant) highest life expectancy (L). Asian Elephant also highest value gestation time (GP) future use construct colour vector marking two outliers. Suppose next want pick ordering PCP axes high scores two measures Striated Sparse obtained. calculation Outliers, can turn scSS distance matrix use one order_best order_tsp produces best ordering. shortcut calculation best path gives guided PCP based ordering combined Striated Sparse index rewards panels discrete variables, panels index level 0.4 involve discrete variable.","code":"if (!requireNamespace(\"alr4\", quietly = TRUE)){     install.packages(\"alr4\") }  suppressPackageStartupMessages(library(alr4)) data(sleep1) data <- na.omit(sleep1) # these vars changed to factors in alr4, change from alr3 data$D <- as.numeric(data$D) data$P <- as.numeric(data$P) data$SE <- as.numeric(data$SE)  # logging the brain and body weights data[,4:5] <- log(data[,4:5])  # short variable names colnames(data) <- c(\"SW\",\"PS\" ,\"TS\" ,\"Bd\", \"Br\",\"L\",\"GP\",\"P\" ,\"SE\" , \"D\"  )  # colours for cases, split Life values into 3 equal sized groups cols1 <- scales::alpha(c(\"red\",\"navy\",\"lightblue3\"   ),.6) cols <- cols1[cut(rank(data$L),3,labels=FALSE)] library(scagnostics) #> Loading required package: rJava library(RColorBrewer) sc <- scagnostics(data) scags <- rownames(sc) scags #> [1] \"Outlying\"  \"Skewed\"    \"Clumpy\"    \"Sparse\"    \"Striated\"  \"Convex\"    #> [7] \"Skinny\"    \"Stringy\"   \"Monotonic\" scag_cols <- rev(brewer.pal(9, \"Pastel1\")) names(scag_cols) <- scags select_scagnostics <- function(sc,names){     sc1 <- sc[names,]     class(sc1) <- class(sc)     return(sc1)     } scOut <- select_scagnostics(sc,\"Outlying\") dOut <- edge2dist(scOut) # dOut is a dist dOut <- as.matrix(dOut) rownames(dOut) <- colnames(dOut)<- names(data) o <- order_best(-dOut, maxexact=10) o <-order_best(-dOut) o <-order_tsp(-dOut) o <-c( 2 , 4 , 1,  5 , 6,  7 , 3 , 8,  9, 10) par(tcl = -.2, cex.axis=.8,mgp=c(3,.3,0)) guided_pcp(data,scOut, path=o,pcp.col=cols,lwd=1.4,          main= \"Best Hamiltonian for outliers\",bar.col = scag_cols[\"Outlying\"],legend=FALSE,bar.axes=TRUE,bar.ylim=c(0,max(scOut))) outliers <- order(data$L, decreasing=T)[1:2] rownames(data)[outliers] #> [1] \"Human\"          \"Asian_elephant\" colOut <- rep(\"grey50\", nrow(data)) colOut[outliers[1]] <- \"red\" # Human colOut[outliers[2]] <- \"blue\" scSS <- t(select_scagnostics(sc,c(\"Striated\", \"Sparse\"))) dSS <- edge2dist(scSS[,1])  + edge2dist(scSS[,2])  # You might think edge2dist(scSS[,1]+ scSS[,2]) would work, but as scSS[,1]+ scSS[,2] is # not of class scagnostics, edge2dist will not fill the dist in the correct order dSS <- as.matrix(dSS) rownames(dSS) <- colnames(dSS)<- names(data) order_best(-dSS,maxexact=10) find_path(-scSS,   order_best,maxexact=10) # for the best path # or find_path(-scSS,   order_best) # for a nearly \"best\" path o <-  c(4, 10 , 2 , 9 , 1,  7 , 8,  6 , 5 ,3) par(tcl = -.2, cex.axis=.8,mgp=c(3,.3,0)) guided_pcp(data,scSS, path=o,pcp.col=cols,lwd=1.4,          main= \"Best Hamiltonian for Striated + Sparse\",          bar.col = scag_cols[c(\"Striated\", \"Sparse\")],          legend=FALSE,bar.axes=TRUE,bar.ylim=c(0,.6))"},{"path":"https://cbhurley.github.io/PairViz/articles/pcp.html","id":"scagnostic-guided-plots-of-sleep-data-using-eulerians","dir":"Articles","previous_headings":"","what":"Scagnostic guided plots of sleep data using Eulerians","title":"Correlation and scagnostic guided parallel coordinate plots","text":"sleep data 10 variables Eulerian path (places pairs variables adjacently) rather long. Eulerian driven Outlyingness measure. Outlying scores pairs variables specified path  Many Outlying scores zero, fact last 25 scores zero. see GP-L highest overall Outlying score, higher Outlying scores involve variables L,GP, Bd, SW,Br .","code":"o <- find_path(-scOut, eulerian) o #>  [1]  7  6  4  1  6  5  7  4  5  1  7  2  6  3  7  9  1  2  4  3  1 10  6  8  6 #> [26]  9  2  3  5  2  8  1  3  8  4  9  3 10  2  5  8  7 10  4 10  5  9  8 10  9 pathw <-  path_weights(scOut,o) head(pathw) #>  L * GP  Bd * L SW * Bd  SW * L  Br * L Br * GP  #>   0.521   0.341   0.360   0.199   0.317   0.231 par(tcl = -.2, cex.axis=.6,mgp=c(3,.3,0)) guided_pcp(data,scOut, path=o[1:25],pcp.col=cols,lwd=1.4,          main= \"First 25: Eulerian for Outlying\",          bar.col = scag_cols[\"Outlying\"],          legend=FALSE,bar.axes=TRUE,bar.ylim=c(0,max(scOut)))  guided_pcp(data,scOut, path=o[25:50],pcp.col=cols,lwd=1.4,          main= \"Last 26: Eulerian for Outlying\",          bar.col = scag_cols[\"Outlying\"],          legend=FALSE,bar.axes=TRUE,bar.ylim=c(0,max(scOut)))"},{"path":"https://cbhurley.github.io/PairViz/articles/pcp.html","id":"focus-on-interesting-plots","dir":"Articles","previous_headings":"","what":"Focus on interesting plots","title":"Correlation and scagnostic guided parallel coordinate plots","text":"Eulerian path visiting pairs variables sleep data length 10. One way focus “interesting”\" pairs (measuring interesting outlyingness ) weighted Eulerian, interesting pairs visited early sequence, . Another approach drop pairs variables interestingness threshold, construct plot showing rest. construct PCP showing pairs variables whose outlier score .2 higher. constructing graph containing variable pairs whose outlier score .2 higher, forming Eulerian graph. One way form graph build complete graph based dOut, matrix outlier scores, remove low weight edges. form graph g keeping edges whose weight .2 . function dn_graph also deletes nodes edges. utility function plotting graph: plot  weight-ordered Eulerian follows high outlying edges first, need construct graph whose edges negative g1. straigtforward using graph package, perhaps following easier: Either way, Eulerian corresponding plot  one panel plot outlier score 0.2. SW-L. Looking back result eulerian(g2), edge SW-L belong g2, added simply make graph Eulerian. case colours used PCP marked outliers GP-L plot found previously, Humans red Asian Elephant blue. looks like two cases responsible high outlier scores panels except Bd-SW.","code":"g <- mk_complete_graph(dOut) g1 <- dn_graph(g,.2 , test=`>=`) requireNamespace(\"igraph\") #> Loading required namespace: igraph igplot <- function(g,weights=FALSE,layout=igraph::layout_in_circle,                     vertex.size=60, vertex.color=\"lightblue\",...){     g <- igraph::graph_from_graphnel(as(g, \"graphNEL\"))     op <- par(mar=c(1,1,1,1))     if (weights){       ew <- round(igraph::get.edge.attribute(g,\"weight\"),3)         igraph::plot.igraph(g,layout=layout,edge.label=ew,vertex.size=vertex.size,vertex.color=vertex.color,...)     }     else     igraph::plot.igraph(g,layout=layout,vertex.size=vertex.size,vertex.color=vertex.color,...)     par(op) } igplot(g1, weights=TRUE, layout=igraph::layout_as_tree) e <- edgeMatrix(g1,duplicates=FALSE) ew <- eWV(g1,e) e <- matrix(nodes(g1)[e],ncol=2,byrow=TRUE) g2 <- ftM2graphNEL(e,-ew,edgemode=\"undirected\") g2 <- dn_graph(mk_complete_graph(-dOut),-.2 , test=`<=`) o <- eulerian(g2) o #> [1] \"GP\" \"L\"  \"Bd\" \"SW\" \"L\"  \"Br\" \"GP\" o <- match(o, names(data)) par(tcl = -.2, cex.axis=.86,mgp=c(3,.3,0)) guided_pcp(data,scOut, path=o,pcp.col=colOut,lwd=1.4,          main= \"Eulerian for high Outlying graph\",          bar.col = scag_cols[\"Outlying\"],          legend=FALSE,bar.axes=TRUE,bar.ylim=c(0,max(scOut)))"},{"path":"https://cbhurley.github.io/PairViz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Catherine Hurley. Maintainer.","code":""},{"path":"https://cbhurley.github.io/PairViz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hurley C, Oldford R (2022). PairViz: Visualization using Graph Traversal. R package version 1.3.5, https://cbhurley.github.io/PairViz/.","code":"@Manual{,   title = {PairViz: Visualization using Graph Traversal},   author = {C.B. Hurley and R.W. Oldford},   year = {2022},   note = {R package version 1.3.5},   url = {https://cbhurley.github.io/PairViz/}, }"},{"path":"https://cbhurley.github.io/PairViz/index.html","id":"pairviz","dir":"","previous_headings":"","what":"Visualization using Graph Traversal","title":"Visualization using Graph Traversal","text":"goal PairViz improving graphics ameliorating order effects, using Eulerian tours Hamiltonian decompositions graphs.","code":""},{"path":"https://cbhurley.github.io/PairViz/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualization using Graph Traversal","text":"can install released version PairViz CRAN : also need install graph package Bioconductor. get started, check PairVizIntroduction vignette.","code":"install.packages(\"PairViz\") if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"graph\")"},{"path":"https://cbhurley.github.io/PairViz/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Visualization using Graph Traversal","text":"C.B. Hurley R.W. Oldford, Pairwise display high dimensional information via Eulerian tours Hamiltonian decompositions. Journal Computational Graphical Statistics. 19(10), pp. 861–886, 2010. C.B. Hurley R.W. Oldford, Eulerian tour algorithms data visualization PairViz package. Computational Statistics, 26(4), pp 613–633, 2011.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/best_orientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-orients a path to be weight-decreasing — best_orientation","title":"Re-orients a path to be weight-decreasing — best_orientation","text":"Re-orients path/cycle, preserving adjacencies weights tend decrease. specifies starting point, cycles .","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/best_orientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-orients a path to be weight-decreasing — best_orientation","text":"","code":"best_orientation(path, d, cycle=FALSE, path_dir= path_cor, from=NULL)"},{"path":"https://cbhurley.github.io/PairViz/reference/best_orientation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-orients a path to be weight-decreasing — best_orientation","text":"path vector giving hamiltonian. d dist, used provide edge weights. cycle TRUE, path interpreted closed path. path_dir function used  evaluate path start orientation Sepcifies starting point, cycles .","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/best_orientation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Re-orients a path to be weight-decreasing — best_orientation","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/best_orientation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Re-orients a path to be weight-decreasing — best_orientation","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/best_orientation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-orients a path to be weight-decreasing — best_orientation","text":"","code":"require(PairViz)  rdist <- function(n) {   d <- matrix(0,n,n)   d[lower.tri(d)] <- runif(n*(n-1)/2)   return(as.dist(d))   } r <- rdist(7) best_orientation(1:7,r)  #> [1] 7 6 5 4 3 2 1 best_orientation(1:7,r,cycle=TRUE)  #> [1] 1 7 6 5 4 3 2"},{"path":"https://cbhurley.github.io/PairViz/reference/cancer.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancer Survival data — cancer","title":"Cancer Survival data — cancer","text":"Patients advanced cancers stomach, bronchus, colon, ovary breast treated ascorbate. purpose study determine survival times differ respect organ affected cancer.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/cancer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancer Survival data — cancer","text":"","code":"data(cancer)"},{"path":"https://cbhurley.github.io/PairViz/reference/cancer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cancer Survival data — cancer","text":"data frame contains following columns: Survival time days Organ Organ affected cancer","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/cancer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cancer Survival data — cancer","text":"Cameron, E. Pauling, L. (1978) Supplemental ascorbate supportive treatment cancer: re-evaluation prolongation survival times terminal human cancer. Proceedings National Academy Science USA, 75, 4538-4542. Also found : Manly, B.F.J. (1986) Multivariate Statistical Methods: Primer, New York: Chapman Hall, 11. Also found : Hand, D.J., et al. (1994) Handbook Small Data Sets, London: Chapman Hall, 255.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/desaturate_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Desaturates colors — desaturate_color","title":"Desaturates colors — desaturate_color","text":"Desaturates colors","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/desaturate_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Desaturates colors — desaturate_color","text":"","code":"desaturate_color(cols, frac = 0.8)"},{"path":"https://cbhurley.github.io/PairViz/reference/desaturate_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Desaturates colors — desaturate_color","text":"cols Colors frac Fraction desaturate .","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/desaturate_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Desaturates colors — desaturate_color","text":"Desaturated version orginal colors","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"Constructs eulerian    complete graph nodes integers 1..n. result euler tour odd n. even  n result exactly euler tour path (n-2)/2 edges must visited twice.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"","code":"eseq(n) eseqa(n) kntour_drop(e) kntour_add(e)"},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"n positive integer. e euler tour Kn n odd","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"numeric vector.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"algorithm used eseq builds path 1..n  appending extra edges path nodes 1..(n-2). function eseqa constructs paths 1..n using alternative algorithm. odd n, tour starts 1, takes steps size 1,2,..m repeatedly, m (n-1)/2, even n, path constructed formed eseqa(n+1), followed dropping node n+1. function kntour\\_drop removes instances n  tour, creating open  approximately eulerian path complete graph n-1 nodes. function kntour\\_add inserts extra node n+1 tour nodes 1, ..n. adds detour tour visiting edges joining nodes 1..n n+1. result open  approximately eulerian path complete graph n+1 nodes.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/eseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct eulerian paths on the complete graph where nodes are integers 1..n. — eseq","text":"","code":"require(PairViz) eseq(5) #>  [1] 1 2 3 1 4 2 5 3 4 5 1 eseq(6) #>  [1] 1 2 3 1 4 2 3 4 5 1 6 2 5 3 6 4 5 6"},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs eulerian tours on a graph. — etour","title":"Constructs eulerian tours on a graph. — etour","text":"etour-- Constructs eulerian tour graph using Hierholzer's algorithm. Returns vector node labels. weighted TRUE constructs weight-decreasing eulerian using modified Hierholzer's algorithm. Usually etour called directly, rather generic function eulerian used.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs eulerian tours on a graph. — etour","text":"","code":"etour(g, start=NULL,weighted=TRUE)"},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs eulerian tours on a graph. — etour","text":"g graph satisfying is_even_graph start optional starting node tour. weighted whether tour uses weights","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructs eulerian tours on a graph. — etour","text":"supplied graph satisfyis_even_graph. weighted TRUE lowest weight edge found, tour starts one nodes, picking node bigger second-smallest edge weight.  tour follows weight-increasing edges. weighted FALSE weights ignored. returned tour typically closed path. However, last edge duplicated edge added make graph even, edge omitted result open path.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Constructs eulerian tours on a graph. — etour","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs eulerian tours on a graph. — etour","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/etour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs eulerian tours on a graph. — etour","text":"","code":"require(PairViz)  g <- mk_even_graph(5)  etour(g) #>  [1] \"1\" \"2\" \"3\" \"1\" \"4\" \"2\" \"5\" \"3\" \"4\" \"5\" \"1\" g <- mk_even_graph(6) # adds 3 extra edges to g, so all nodes are even etour(g) #>  [1] \"1\" \"2\" \"3\" \"1\" \"4\" \"2\" \"3\" \"4\" \"5\" \"1\" \"6\" \"2\" \"5\" \"3\" \"6\" \"4\" \"5\" \"6\" etour(g, start= \"4\") # modifies the starting node #>  [1] \"4\" \"1\" \"2\" \"3\" \"1\" \"5\" \"2\" \"3\" \"4\" \"2\" \"6\" \"1\" \"6\" \"3\" \"5\" \"4\" \"6\" \"5\"  eulerian(6) # The eulerian wrapper looks after making even graph, #>  [1] 1 2 3 1 4 2 3 4 5 1 6 2 5 3 6 4 5 6 #also returns numbers rather than nodes  # On a general graph. v <- LETTERS[1:4] g <- new(\"graphNEL\",nodes=v) g <- addEdge(v[1],v[3:4],g,1:2) g <- addEdge(v[2],v[3:4],g,3:4) etour(g)  #> [1] \"C\" \"A\" \"D\" \"B\" \"C\"  eulerian(g) # Equivalently, use eulerian wrapper  #> [1] \"C\" \"A\" \"D\" \"B\" \"C\"   n <- LETTERS[1:5] g <- new(\"graphNEL\",nodes=n) g <- addEdge(n[1],n[2:3],g) g <-addEdge(n[2],n[3:5],g) g <-addEdge(n[4],n[3],g) is_even_graph(g) #> [1] FALSE etour(mk_even_graph(g)) #> [1] \"B\" \"A\" \"C\" \"B\" \"D\" \"C\" \"E\" \"B\"  eulerian(g) # Equivalently, use eulerian wrapper  #> [1] \"B\" \"A\" \"C\" \"B\" \"D\" \"C\" \"E\" \"B\""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":null,"dir":"Reference","previous_headings":"","what":"~~ Methods for Function eulerian  ~~ — eulerian","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"generic function returns eulerian (nearly eulerian)  path based self.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"","code":"eulerian(self, start=NULL,weighted=TRUE)"},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"self -- see start -- see weighted -- see ","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"vector representing eulerian- character vector node names graph, otherwise numeric vector. graph connected, result list eulerians connected component.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"self = \"even_graph\" Uses etour construct eulerian. weighted TRUE weighted eulerian constructed, otherwise weights ignored.  non-null start eulerian starting point. self = \"graphNEL\" Augments graph using mk_euler_graph, invokes eulerian augmented verion. self  connected, (approximate) eulerians formed connected component, returned list. self = \"matrix\" Builds graph using mk_euler_graph, invokes eulerian result. self = \"numeric\" Builds graph self nodes using mk_euler_graph, invokes eulerian result. self = \"\" Builds graph using mk_euler_graph, invokes eulerian result.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"C. Hierholzer (1873). Uber die Moglichkeit, einen  \tLinienzug ohne Wiederholung und ohne Unterbrechung zu umfahren. Math. Annalen VI, pp. 30-32. Also, see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/eulerian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"~~ Methods for Function eulerian  ~~ — eulerian","text":"","code":"require(PairViz)  d <- as.matrix(eurodist)[1:8,1:8]   # pick the first 8 cities  eulerian(d) #>  [1] 4 3 6 4 5 3 8 4 7 6 7 3 2 8 5 6 2 5 8 7 5 1 8 6 1 3 2 4 1 7 2 1 eulerian(d, weighted=FALSE) # In this case, starts at city 1 and ends at city 8 #>  [1] 1 2 3 1 4 2 5 1 6 2 7 1 8 2 3 4 5 3 6 4 7 3 8 4 5 6 7 5 8 6 7 8"},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of graphs where all nodes have even degree — even_graph","title":"Class of graphs where all nodes have even degree — even_graph","text":"class extension graphNEL-class. graphs class, euler tours may always constructed. Objects class  created  mk_even_graph","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class of graphs where all nodes have even degree — even_graph","text":"class slots  graphNEL-class plus: dummy_node: Object class \"character\" extra_edges: Object class \"character\" weighted: Object class \"logical\"","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Class of graphs where all nodes have even degree — even_graph","text":"Class graphNEL-class, directly. Class graph-class, class \"graphNEL\", distance 2.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class of graphs where all nodes have even degree — even_graph","text":"is_even_graph signature(g = \"graphNEL\"): checks whether graph nodes even degree. is_even_graph signature(g = \"even_graph\"): always TRUE.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class of graphs where all nodes have even degree — even_graph","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class of graphs where all nodes have even degree — even_graph","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/even_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of graphs where all nodes have even degree — even_graph","text":"","code":"showClass(\"even_graph\") #> Class \"even_graph\" [package \"PairViz\"] #>  #> Slots: #>                                                                                #> Name:   dummy_node extra_edges    weighted       nodes       edgeL    edgeData #> Class:   character   character     logical      vector        list    attrData #>                                            #> Name:     nodeData  renderInfo   graphData #> Class:    attrData  renderInfo        list #>  #> Extends:  #> Class \"graphNEL\", directly #> Class \"graph\", by class \"graphNEL\", distance 2 #> Class \"graphBase\", by class \"graphNEL\", distance 3"},{"path":"https://cbhurley.github.io/PairViz/reference/find_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a path from a matrix of edge weights. — find_path","title":"Constructs a path from a matrix of edge weights. — find_path","text":"Returns path,  constructed applying function path   edge weights. edge many weights, .e edgew matrix, weights first reduced function combine applied rows. path NULL, returned path defaults 1..nnodes(edgew)","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/find_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a path from a matrix of edge weights. — find_path","text":"","code":"find_path(edgew, path=NULL,  combine=sum, edge.index=edge_index(edgew),...)"},{"path":"https://cbhurley.github.io/PairViz/reference/find_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a path from a matrix of edge weights. — find_path","text":"edgew Matrix (vector) whose ith row (element) weights pair indexed pair row edge.index. path function   \tused construct index path. combine function combines row weights edge single numeric value. edge.index 2-column matrix row giving indices  corresponding weight edgew. ... passed path construction function.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/find_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a path from a matrix of edge weights. — find_path","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/guided_pcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Guided parallel coordinate plot. — guided_pcp","title":"Guided parallel coordinate plot. — guided_pcp","text":"Draws parallel coordinate plot, accompanying barchart showing index (eg correlation, scagnostics) levels panel. index legend optional.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/guided_pcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guided parallel coordinate plot. — guided_pcp","text":"","code":"guided_pcp(data, edgew=NULL, path = NULL, pathw=NULL,zoom=NULL,pcpfn=pcp,      pcp.col = 1,lwd=0.5, panel.colors=NULL, pcp.mar=c(1.5,2,2,2), pcp.scale=TRUE,      bar.col=1:9,bar.axes=FALSE, bar.mar=NULL,bar.ylim=NULL, reorder.weights=TRUE,     layout.heights=NULL, layout.widths=c(10,1),      main=NULL,legend=FALSE,cex.legend = 1,legend.mar=c(1,4,1,1),...)"},{"path":"https://cbhurley.github.io/PairViz/reference/guided_pcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guided parallel coordinate plot. — guided_pcp","text":"data data frame matrix. edgew Matrix (vector) whose rows give index values pair variables. path index vector specifying variable order, function. function, find_path(edgew,path,...) constructs index vector. pathw Matrix (vector) whose rows give index values adjacent pair variables path. Usually argument NULL pathw computed path edgew. zoom provided, numeric vector specifying subsequence path display. pcpfn Function draw parallel coordinates. pcp.col Line colors. lwd Line widths. panel.colors Background panel colors, passed thepcpfn pcp.mar Controls PCP margin size. pcp.scale TRUE, variables scaled 0-1 range, otherwise data scaled. bar.col Bar colors. bar.axes Draw barplot axes, TRUE. bar.mar Controls barplot margin size. bar.ylim Vertical limits bar plot. reorder.weights TRUE, reorder barplot indices large values drawn bottom. layout.heights Controls layout. layout.widths Controls layout. main Main title PCP. legend TRUE, draws barplot index legend. cex.legend Controls legend text size. legend.mar Legend margin size. ... Optional arguments","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/guided_pcp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Guided parallel coordinate plot. — guided_pcp","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/guided_pcp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guided parallel coordinate plot. — guided_pcp","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/guided_pcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guided parallel coordinate plot. — guided_pcp","text":"","code":"require(PairViz)          data <- mtcars[,c(1,3:6)] cols <- c(\"red\",\"green\")[mtcars[,9]+1 ]    # transmission type, red=automatic  # add a correlation guide and find \"better\" hamiltonians...  # add a correlation guide...   corw <- dist2edge(as.dist(cor(data))) edgew <- cbind(corw*(corw>0), corw*(corw<0))           # add a correlation guide to a PCP, positive cors shown in blue, negative in purple...  if (FALSE) { dev.new(width=3,height=3)  par(cex.axis=.65)  guided_pcp(data,edgew, pcp.col=cols,          main=\"Correlation guided PCP\",bar.col = c(\"blue\",\"purple\"))  dev.new(width=7,height=3) par(cex.axis=.65)  guided_pcp(data,edgew, path=eulerian, pcp.col=cols,lwd=2,          main=\"Correlation guided Eulerian PCP\",bar.col = c(\"blue\",\"purple\"),bar.axes=TRUE)    }  # Scagnostic guides are useful here- see the demos for more examples."},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"zigzag - Constructs hamiltonian paths pair (,j)  appears least one hamiltonians. hpaths - Returns hamiltonian decomposition complete graph n nodes. See Details. permute_hpaths - Returns modified version paths, vertices  re-labelled first hamiltonian path1.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"","code":"zigzag(n) hpaths(n, matrix=TRUE,cycle=NULL,...) permute_hpaths(path1,paths= hpaths(length(path1)), matrix=TRUE,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"n positive integer. hpaths, n may also vector specifying first hamiltonian. matrix TRUE, returns matrix row hamiltonian  path, otherwise concatenates rows vector. cycle TRUE, returns hamiltonian cycles, .e. every hamiltonian starts node. FALSE, returned paths open. Defaults TRUE odd n,FALSE even n. path1 vector-  first hamiltonian returned hamiltonian decomposition. paths matrix row hamiltonian. ... Ignored.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"numeric matrix row  contains permutation 1..n, rows concatenated vector matrix=FALSE.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"hpaths -  graph theory know odd n, complete graph decomposes (n-1)/2 edge distinct hamiltonian cycles, even n graph decomposes n/2 edge distinct hamiltonian paths. default behaviour function  hpaths produce cycle decomposition odd n path decomposition even n. However, TRUE value supplied argument cycle, returned paths cycles, result true  decomposition odd n, even n last hamiltonian duplicate edges.  FALSE value supplied argument cycle, returned paths open, result true decomposition    even n, odd n last hamiltonian duplicate edges.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"D.E. Lucas (1892), Recreations Matematiques, Vol II. Gauthier Villars, Paris. Also\tsee overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/hpaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamiltonian paths on the complete graph on 1..n, using Lucas-Walecki constructions. — hpaths","text":"","code":"require(PairViz)  zigzag(7) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    2    7    3    6    4    5 #> [2,]    2    3    1    4    7    5    6 #> [3,]    3    4    2    5    1    6    7 #> [4,]    4    5    3    6    2    7    1 hpaths(7) # the rows form a decomp. into hamiltonian cycles #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    2    3    7    4    6    5 #> [2,]    1    3    4    2    5    7    6 #> [3,]    1    4    5    3    6    2    7  # Now concatenate the rows and close the path hpaths(7,matrix=FALSE) #>  [1] 1 2 3 7 4 6 5 1 3 4 2 5 7 6 1 4 5 3 6 2 7 1  # Form a decomposition into hamiltonian cycles-  # this decomposition is not exact, as the last row duplicates edges hpaths(7,cycle=FALSE) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    2    7    3    6    4    5 #> [2,]    2    3    1    4    7    5    6 #> [3,]    3    4    2    5    1    6    7 #> [4,]    4    5    3    6    2    7    1  # For even n, the default is a decomposition into hamiltonian paths, not cycles. hpaths(6) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    2    6    3    5    4 #> [2,]    2    3    1    4    6    5 #> [3,]    3    4    2    5    1    6  # If cycles are required for even n,  # the decomposition will not be exact and the last row duplicates edges  hpaths(6,cycle=TRUE) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    2    3    6    4    5 #> [2,]    1    3    4    2    5    6 #> [3,]    1    4    5    3    6    2  # If you want to specify the first hamiltonian of the decomposition, use hpaths(1:7) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    2    3    4    5    6    7 #> [2,]    1    3    5    2    7    4    6 #> [3,]    1    5    7    3    6    2    4"},{"path":"https://cbhurley.github.io/PairViz/reference/mc_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple comparison plot. — mc_plot","title":"Multiple comparison plot. — mc_plot","text":"grouped data. Draws boxplots group overlays confidence intervals pairwise comparison means.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mc_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple comparison plot. — mc_plot","text":"","code":"mc_plot(data, fit, path = eulerian, col = rainbow(length(data), s = 0.4),  levels = c(0.9, 0.95, 0.99), varwidth = TRUE, frame.plot = FALSE,  boxwex = 0.3, cex=0.75, zoom=NULL,ci.yusr=NULL,ci.pos=FALSE,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/mc_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple comparison plot. — mc_plot","text":"data list vectors, returned split. fit Either aov fit, else  matrix columns estimate, followed confidence intervals. fit aov fit, path argument vector. path index vector function. vector, groups plotted order data[path]. default,  function eulerian, produces ordering pair groups appears adjacently, p-values roughly increasing sequence progresses. col vector colours, one per group. levels Vector increasing confidence levels. varwidth Passed  boxplot. frame.plot Passed  boxplot. boxwex Passed  boxplot. cex Passed  boxplot. zoom provided, numeric vector specifying subsequence path display. ci.yusr Specifies vertical par(usr)  confidence intervals. Defaults max min. ci.pos TRUE, CIs mu(max) - mu(min), otherwise mu(right) - mu(left). ... Optional arguments, passed  boxplot overlayCI.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mc_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multiple comparison plot. — mc_plot","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mc_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multiple comparison plot. — mc_plot","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/mc_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple comparison plot. — mc_plot","text":"","code":"require(PairViz)         data(cancer) bx <- with(cancer, split(sqrt(Survival),Organ))    a <-  aov(sqrt(Survival) ~ Organ,data=cancer) if (FALSE) { dev.new(height=4.5, width=9.5) op <- par(no.readonly = TRUE)  par(cex.axis=.75, cex.main = 1.0, cex.lab=1) par(mar=c(3,5,3,5))  mc_plot(bx,a,main=\"Pairwise comparisons of cancer types\", ylab=\"Sqrt Survival\")  par(op) }"},{"path":"https://cbhurley.github.io/PairViz/reference/mk_complete_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a complete graph. — mk_complete_graph","title":"Constructs a complete graph. — mk_complete_graph","text":"Constructs complete graph, actually instance graph-NEL","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mk_complete_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a complete graph. — mk_complete_graph","text":"","code":"mk_complete_graph(d)"},{"path":"https://cbhurley.github.io/PairViz/reference/mk_complete_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a complete graph. — mk_complete_graph","text":"d integer vector length 1 specified number nodes, character vector nodes names,  dist, symmetric matrix, either specify nodes edge weights.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mk_complete_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a complete graph. — mk_complete_graph","text":"- graph-NEL","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mk_complete_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a complete graph. — mk_complete_graph","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mk_complete_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs a complete graph. — mk_complete_graph","text":"","code":"require(PairViz) d <- dist(rnorm(5)) g <- mk_complete_graph(d)"},{"path":"https://cbhurley.github.io/PairViz/reference/mk_even_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs an even graph — mk_even_graph","title":"Constructs an even graph — mk_even_graph","text":"~~ Methods function mk_even_graph. return instance even_graph, nodes even degree. result  satisfies is_even_graph. resulting graph yields euler tour.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mk_even_graph.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Constructs an even graph — mk_even_graph","text":"self = \"graphNEL\",use_weights=TRUE,add_edges=TRUE workhorse method. self satisfy is_even_graph, graph forced even one folowing. add_edges TRUE, odd nodes paired new edge added  pair, possibly duplicating existing edge. add_edges vector odd nodes, paired order. \tadd_edges FALSE new dummy node added edges going odd nodes. self = \"matrix\",use_weights=TRUE,add_edges=TRUE first constructs complete graph using mk_complete_graph, augmented even. self = \"numeric\",use_weights=FALSE,add_edges=TRUE first constructs complete graph using  mk_complete_graph, augmented even. self = \"\",use_weights=TRUE,add_edges=TRUE first constructs complete graph using  mk_complete_graph, augmented even. self = \"even_graph\",add_edges=TRUE returns self.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/mk_even_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Constructs an even graph — mk_even_graph","text":"see overview","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"Returns best hamiltonian","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"","code":"order_best(d, maxexact=9,nsamples=50000,path_weight=sum, cycle=FALSE,path_dir = path_cor,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"d dist, used provide edge weights. maxexact sequence length  <= maxexact, find overall best hamiltonian, otherwise compares nsamples randomly generated permutations. nsamples sequence length  <= maxexact, finds  best nsamples randomly generated permutations . cycle TRUE, finds shortest cycle, otherwise shortest open path. path_weight Combines edge weights single path/cycle weight. path_dir function provided, used re-orient cycle/path. Default function path_cor. ... Ignored.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"vector containing permutation 1..n","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"Requires package gtools.  Currently possible find best hamiltonian complete enumeration 10 nodes.  path_dir  non NULL, returned hamiltonian also optimally oriented using best_orientation, compares orientations via path_dir.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/order_best.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uses brute-force enumeration  to find the best hamiltonian on the complete graph on 1..n. — order_best","text":"","code":"require(PairViz) order_best(eurodist) #>  [1]  7 11 17 21 10  3  4 18  5 13  8 15 20 16  6 12  9 14  2  1 19"},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"Returns shortest cycle path via tsp solver package TSP","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"","code":"order_tsp(d, method = \"nearest\", cycle=FALSE,improve=FALSE,path_dir = path_cor,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"d dist, used provide edge weights. method Options nearest_insertion, farthest_insertion, cheapest_insertion,          \tarbitrary_insertion, nn, repetitive_nn, \t2-opt concorde package loaded, concorde. See solve_TSP details. improve TRUE, attempts improve solution using \"2-opt\". cycle TRUE, finds shortest cycle, otherwise shortest open path. path_dir function provided, used re-orient cycle/path. Default function path_cor. ... passed solve_tsp","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"vector containing permutation 1..n","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"Requires package TSP.  path_dir  non NULL, returned hamiltonian also optimally oriented using best_orientation, compares orientations via path_dir.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"See package TSP.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/order_tsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uses tsp to find the best hamiltonian on the complete graph on 1..n — order_tsp","text":"","code":"require(PairViz)   rdist <- function(n) {   d <- matrix(0,n,n)   d[lower.tri(d)] <- runif(n*(n-1)/2)   return(as.dist(d))   }   order_tsp(rdist(7)) #> [1] 4 1 5 3 7 6 2     edist <- as.dist(as.matrix(eurodist)) order_tsp(edist) #>  [1]  9 14 12  2 13 15 16  8 18  5  4  3  6 11  7 20 10 17 21 19  1"},{"path":"https://cbhurley.github.io/PairViz/reference/overlayci.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to overlay confidence intervals on the current plot. — overlayCI","title":"Function to overlay confidence intervals on the current plot. — overlayCI","text":"Overlays confidence intervals current plot. Also draws right hand axis, horizontal broken line zero, marks significant comparisons arrow, .e. CIs intersect zero.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/overlayci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to overlay confidence intervals on the current plot. — overlayCI","text":"","code":"overlayCI(cis, xpos=NULL,ci.cols = NULL, ci.ex = 2, ci.ocol = \"grey40\",  p.col = \"grey40\", pch = 1, sig.col = \"red\", sig.lwd = 1, yusr = NULL, ci.label=\"Differences\",ci.cex=0.5,arrow.length=0.1,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/overlayci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to overlay confidence intervals on the current plot. — overlayCI","text":"cis matrix containing confidence intervals. row corresponds   \tdifferent comparison, first column estimated mean, succesive pairs columns give lower upper limits different confidence levels. ci.cols vector colours, one colour confidence level. Defaults shades grey. ci.ex Controls confidence interval line width. xpos Horizonal positions CIs drawn. Defaults 1.5,2.5,3.5,.. ci.ocol Colour zero line. p.col Colour point used CI centre. pch Symbol used CI centre. sig.col Colour arrow marking significant comparisons. sig.lwd Width arrow marking significant comparisons. yusr Specifies vertical par(usr) .Defaults max min. ci.label Label drawn right margin. ci.cex Controls size CI mean point symbol. arrow.length Controls size arrow right hand axis. ... Ignored","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/overlayci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to overlay confidence intervals on the current plot. — overlayCI","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/overlayci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to overlay confidence intervals on the current plot. — overlayCI","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/overlayci.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Function to overlay confidence intervals on the current plot. — overlayCI","text":"function called mc_plot","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of PairViz package — overview","title":"Overview of PairViz package — overview","text":"Implements methods described Hurley Oldford paper. functions constructing eulerian paths complete graphs- see eseq, hpaths, weighted_hpaths, eulerians general graphs-  see etour eulerian. also functions new types graphics, mc_plot, catpcp  \tguided_pcp barchart/mosaic variant table_plot.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/overview.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Overview of PairViz package — overview","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/overview.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Overview of PairViz package — overview","text":"C.B. Hurley R.W. Oldford, Pairwise display high dimensional information via  Eulerian tours Hamiltonian decompositions. Journal Computational Graphical Statistics. 19(10), pp. 861--886, 2010. C.B. Hurley R.W. Oldford,  Eulerian tour algorithms data visualization PairViz package.  Computational Statistics, 26(4), pp 613--633, 2011.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/path_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Measures the tendency of edge weights to increase. — path_cor","title":"Measures the tendency of edge weights to increase. — path_cor","text":"Returns (Kendalls tau) correlation edge weights vector 1.. (number weights).","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/path_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measures the tendency of edge weights to increase. — path_cor","text":"","code":"path_cor(edgew, method = \"kendall\")"},{"path":"https://cbhurley.github.io/PairViz/reference/path_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measures the tendency of edge weights to increase. — path_cor","text":"edgew vector edge weights. method passed cor","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions to manipulate pairwise information. — path_weights","title":"Utility functions to manipulate pairwise information. — path_weights","text":" functions perform calculations edge matrices containing pairwise information.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions to manipulate pairwise information. — path_weights","text":"","code":"path_weights(edgew, path,  symmetric = TRUE,edge.index=edge_index(edgew),...) path_cis(edgew, path,edge.index=edge_index(edgew),ci.pos=FALSE) edge2dist(edgew, edge.index=edge_index(edgew)) dist2edge(d) edge_index(x, order=\"default\")"},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions to manipulate pairwise information. — path_weights","text":"edgew Matrix (vector) whose ith row (element) weights pair indexed pair row edge.index.   edge2dist, edgew vector. path Vector indices rows edgew. symmetric TRUE edge weights interpreted symmetric. edge.index 2-column matrix row giving indices  corresponding weight edgew. ci.pos TRUE, CIs mu(max) - mu(min), otherwise mu(right) - mu(left). d dist matrx distances. order \"low.order.first\" \"scagnostics\", lists lowest index pairs first, otherwise lists pairs starting 1, 2 etc. x edgew matrix vector, positive integer. ... Ignored","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions to manipulate pairwise information. — path_weights","text":"path_weights - Returns matrix path weights ith row result contains weights indices path[], path[+1] path_cis - Returns matrix path confidence intervals ith row result contains intervals mean-path[] -  mean-path[+1] edge2dist - Returns dist,  containing elements edgew. dist2edge - Returns vector edge weights. edge_index -generic function. Returns 2-column matrix one row  edge.  row contains index pair ,j. order \"low.order.first\" \"scagnostics\", lists lowest index pairs first - default ordering class scagdf, otherwise lists pairs   starting 1, 2 etc nnodes - edgew contains edge weights complete graph;  returns number nodes complete graph.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Utility functions to manipulate pairwise information. — path_weights","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility functions to manipulate pairwise information. — path_weights","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pathweights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions to manipulate pairwise information. — path_weights","text":"","code":"require(PairViz)  s <- matrix(1:40,nrow=10,ncol=4)  edge2dist(s[,1]) #>    1  2  3  4 #> 2  1          #> 3  2  5       #> 4  3  6  8    #> 5  4  7  9 10  path_weights(s,1:4) #>      [,1] [,2] [,3] [,4] #> [1,]    1   11   21   31 #> [2,]    5   15   25   35 #> [3,]    8   18   28   38 path_weights(s,eseq(5)) #>       [,1] [,2] [,3] [,4] #>  [1,]    1   11   21   31 #>  [2,]    5   15   25   35 #>  [3,]    2   12   22   32 #>  [4,]    3   13   23   33 #>  [5,]    6   16   26   36 #>  [6,]    7   17   27   37 #>  [7,]    9   19   29   39 #>  [8,]    8   18   28   38 #>  [9,]   10   20   30   40 #> [10,]    4   14   24   34  fm1 <- aov(breaks ~ wool + tension, data = warpbreaks) tuk <- TukeyHSD(fm1, \"tension\")[[1]]  # Here the first argument (weight matrix) can have number of columns  path_weights(tuk,c(1:3,1))   #>           diff       lwr        upr       p adj #> M-L -10.000000 -19.35342 -0.6465793 0.033626219 #> H-M  -4.722222 -14.07564  4.6311985 0.447421021 #> H-L -14.722222 -24.07564 -5.3688015 0.001121788    # Here the first argument (weight matrix) should have an odd number of columns- # the first is the mean difference, other column pairs are endpoints of CIs   path_cis(tuk[,-4],c(1:3,1)) #>           diff        lwr        upr #> M-L -10.000000 -19.353421 -0.6465793 #> H-M  -4.722222 -14.075643  4.6311985 #> L-H  14.722222   5.368801 24.0756429"},{"path":"https://cbhurley.github.io/PairViz/reference/pcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced parallel coordinate plots. — pcp","title":"Enhanced parallel coordinate plots. — pcp","text":"pcp draws parallel coordinate plot.modified version parcoord {MASS}.  Variables may reordered panels colored display. catpcp draws parallel coordinate plot variant categorical data.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced parallel coordinate plots. — pcp","text":"","code":"pcp(data, order = NULL, panel.colors = NULL, col = 1, lty = 1,  horizontal = TRUE, mar = NULL, scale = TRUE, axis.width = 0, axis.grid.col=\"grey70\",connect=TRUE, ...)  catpcp(data, order = NULL, pcpbars, barvars = 1:ncol(data),  pcpbars.border = \"black\", pcpbars.col = NULL, pcpbars.labels = FALSE,  pcpbars.axis.at = NULL, pcpbars.axis.labels = NULL,  axis.width = 0.2,connect=TRUE, ...)"},{"path":"https://cbhurley.github.io/PairViz/reference/pcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced parallel coordinate plots. — pcp","text":"data data frame matrix. order index vector specifying variable order. NULL, variables used. panel.colors either vector matrix panel colors.    vector supplied, ith color used ith panel. matrix, dimensions    match variables. Diagonal entries ignored. col vector colours, recycled necessary observation. lty vector line types,  recycled necessary observation. horizontal TRUE, orientation horizontal. mar margin parameters, passed par. scale TRUE, variables scaled unit interval. axis.width Width parallel axes. axis.grid.col Color variable axes. Use NULL axes. connect FALSE, line segments connected. Points drawn axis.width=0. pcpbars list, one component per barvar. Component matrix bottom top bars variable. barvars Categorical variables overlayed bars show level frequency. pcpbars.border Border colour bars. pcpbars.col Colour bars. pcpbars.labels Labels bars. pcpbars.axis.Axis label positions bars. pcpbars.axis.labels Axis label text bars. ... parameters, passed pcp catpcp","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/pcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced parallel coordinate plots. — pcp","text":"","code":"require(PairViz)      y <- as.data.frame(as.table(HairEyeColor))  colvar <- 3 # any of 1:3 will do y <- y[order(y[,colvar]),] # ensures that cases are ordered by colour within each factor level ylong <- apply(y[,-4],2, function(x) rep(x,times=y[,4]))  cols <- desaturate_color(rainbow(4,alpha=0.3),.5) cols <- cols[as.numeric(as.factor(ylong[,colvar]))]     ds <- factor_spreadout(ylong)     dev.new(width=5,height=2.5) par(mar=c(2,1,2,1)) par( cex.axis=.8,cex=.8)    catpcp(ds$data,col=cols,lwd=2,pcpbars=ds$bars,pcpbars.labels=TRUE,main=\"Hair Eye data\")"},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to construct graphs. — knn_graph","title":"Functions to construct graphs. — knn_graph","text":"Functions construct graphs- see details .","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to construct graphs. — knn_graph","text":"","code":"knn_graph(g, k = 2) dn_graph(g, d = 1, test=`<=`) mk_binary_graph(n,sep=\"\",delta=1,test=`==`) mk_hypercube_graph(n,sep=\"\") mk_line_graph(g,sep=\"-\") kspace_graph(n,m, link=NULL,sep=\"-\") graph_product(g,h, type=\"cartesian\",sep=\"-\") graph_compose(g,h,sep=\"-\") graph_sum(g,h,combineWeight=`+`)  bipartite_graph(n1,n2) iterated_line_graph(g,sep=\"-\")"},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to construct graphs. — knn_graph","text":"g graph h graph n positive integer, character vector. k positive integer d edge weight test used select edges. sep used form node names new graph. m subsets size m nodes kneser graph. link positive number NULL. NULL, returned graph complete. Otherwise edges subsets sharing link elements. type type graph product, one \"cartesian\", \"strong\" \"tensor\" n1 character vector. n2 character vector. delta used select edges. combineWeight used combine weights.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to construct graphs. — knn_graph","text":"knn_graph- returns symmetric k nearest neighbour graph dn_graph- returns  graph formed g edges satisfy test(weight, d). default retains edges whose weight 1 less. Nodes edges also removed. mk_hypercube_graph- returns hypercube graph $2^n$ nodes mk_binary_graph(n,sep=\"\",delta=1,test=`==`) - returns  graph $2^n$ nodes. Undirected edges join nodes B whose binary vectors satisfy \\(a_i \\leq b_i$,$=1, \\ldots, n\\) test(\\(\\sum(b_i - a_i)\\), delta) true. mk_line_graph- returns line graph g kspace_graph- returns  graph nodes  subsets size m n. Edges connect nodes whose subsets share link elements. standard kneser graph link=0. link NULL, returned graph complete. graph_product(g,h, type=\"cartesian\",sep=\"-\")- returns graph product g h. graph_compose(g,h,sep=\"-\")- returns graph composition g h. bipartite_graph(n1,n2)- returns complete bipartite graph node sets n1 n2. graph_sum(g,h,combineWeight=`+`)- returns graph whose nodes edges union g h. Weights common edges combined using combineWeight. iterated_line_graph- returns iterated line graph g, compression nodes described reference Hurley Oldford(2008) given .","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functions to construct graphs. — knn_graph","text":"See Graph Theory text. Also C.B. Hurley R.W. Oldford, Graphs navigational infrastructure high dimensional data spaces. 2008 submitted.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions to construct graphs. — knn_graph","text":"C.B. Hurley R.W. Oldford","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/specialg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to construct graphs. — knn_graph","text":"","code":"# See the demo file nav.R"},{"path":"https://cbhurley.github.io/PairViz/reference/spreadout.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to prepare for categorical parallel coordinates, drawn by catpcp. — spreadout","title":"Functions to prepare for categorical parallel coordinates, drawn by catpcp. — spreadout","text":"factor_spreadout spreads data factor level. rater_spreadout spreads data rating level. rater version appropriate variables (factors) levels.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/spreadout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to prepare for categorical parallel coordinates, drawn by catpcp. — spreadout","text":"","code":"factor_spreadout(d) rater_spreadout(d, levs, minspace = NULL,scale=FALSE)"},{"path":"https://cbhurley.github.io/PairViz/reference/spreadout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to prepare for categorical parallel coordinates, drawn by catpcp. — spreadout","text":"d data frame variable can interpreted factor. levs rating levels. Specifying controls order rating levels axis. minspace minimum amount space bars. scale scale=FALSE, ith rater values spreadout value . scale=TRUE, values scaled 0-1.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/spreadout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to prepare for categorical parallel coordinates, drawn by catpcp. — spreadout","text":"factor_spreadout spreads data factor level. returns list two components. first data, containing spreadout data, scaled 0-1. second bars, list whose ith component gives bottom top bars ith variable d. rater_spreadout spreads data rater level. returns list two components. first data, containing spreadout data. scale=FALSE, ith rater values spreadout value . scale=TRUE, values scaled 0-1. second component bars, list whose ith component gives bottom top bars ith variable d.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/tableplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots rectangles on a grid — table_plot","title":"Plots rectangles on a grid — table_plot","text":"Plots rectangles grid-  barchart/mosaic variant facilitates pairwise comparisons.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/tableplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots rectangles on a grid — table_plot","text":"","code":"table_plot(rectw, recth, col=\"grey50\", gapx = NULL, gapy = NULL,  spacex = 0.03, spacey = 0.03, xjust = \"center\", yjust = \"center\",  xruler = NULL, yruler = NULL, color.ruler = \"grey32\", pch0=1,xlab=NULL,ylab=NULL, plot=TRUE,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/tableplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots rectangles on a grid — table_plot","text":"rectw n*m matrix  rectangle widths, vector m column widths. recth n*m  matrix  rectangle heights, vector n row heights. col Rectangle fill colours. gapx Gaps x-direction. provided vector length m-1. gapy Gaps x-direction. provided vector length n-1. spacex single value- extra space columns fraction maximum row total rectw . spacey single value- extra space rows fraction maximum column total recth . xjust Horizontal justification rectangles- \"center\", \"left\", \"right\". yjust Vertical justification rectangles- \"center\", \"bottom\", \"top\". xruler Specifies position rulers drawn parallel x-axis. Values subset (\"top\",\"center\",\"bottom\") yruler Specifies position rulers drawn parallel y-axis. Values subset (\"left\",\"center\",\"right\") color.ruler Color rulers. pch0 Symbol zero cell size. May NULL. xlab X label ylab Y label plot TRUE, draw tge plot. Otherwise returns matrix row coordinates calculated rectangle. ... Passed plot.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/tableplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots rectangles on a grid — table_plot","text":"See overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/tableplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots rectangles on a grid — table_plot","text":"Catherine Hurley","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/tableplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots rectangles on a grid — table_plot","text":"","code":"if (FALSE) { require(PairViz)         tab <- apply(HairEyeColor, c(1, 2), sum)   dev.new() par(mar=c(3,3,1,1)) par(cex=.6,mgp=c(2, -.5, 0)) table_plot(sqrt(tab),sqrt(tab)) # this table plot has cells with widths and heights proportional to the square root of cell counts.  tabp <- prop.table(tab,2)  table_plot(apply(tab,2,sum),tabp) # make cell widths proportional to  #margin totals, heights to conditional prob  cols <- 2:5 table_plot(apply(tab,2,sum),tabp, yjust=\"bottom\",col=cols,yruler=c(\"left\",\"right\"))  # add colours, rulers and  bottom-justify  # The result is similar to the mosaic, without the mosaic effect of equalizing gaps.  #In the table version the rectangles line up across rows,  #so comparing heights, ie. conditional probs is easier.  o <- hpaths(1:4)[2,] table_plot(apply(tab,2,sum)[o],tabp[,o], yjust=\"bottom\",col=cols,yruler=c(\"left\",\"right\")) # Permutes the columns so all pairs of columns can be compared.  #In the second permutation can easily see that    #p(black|blue eyes)> p(black|green eyes)   dev.new() par(mar=c(3,3,1,1)) par(mgp=c(2, -.5, 0)) mosaicplot(t(tab)[,nrow(tab):1],col=rev(cols),main=\"\") # mosaic- good for seeing deviations from independence. hard to compare conditional probs, # except for those in the bottom and top rows.  }"},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"Returns modified version paths,  component paths/cycles re-oriented low weight edges occur first, component paths/cycles permuted low-weight paths first.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"","code":"weighted_hpaths(d, path1 = NULL, paths=NULL, matrix=TRUE, cycle=NULL,  path_weight=sum, path_dir = path_cor,...)"},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"d dist, used provide edge weights. path1 vector giving hamiltonian.   first path returned hamiltonian. default obtained order_tsp. paths matrix row hamiltonian. Default comes hpaths. matrix TRUE, returns matrix row hamiltonian  path, otherwise concatenates rows vector. odd n, starting node appended close eulerian. cycle TRUE, weighted_hpaths algorithm evaluates  path_weight  hamiltonian cycles, FALSE, open hamiltonian paths.  Default  TRUE odd n FALSE even n. path_weight function used  combine path weights single value. Default function path_cor. path_dir function used  evaluate path start orientation. ... passed path_weight","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"path provided, find hamiltonian (path even n, cycle odd n) smallest total  weight. Applying path_dir edge weights, pick  starting point orientation path1 giving largest path_dir value. (open paths, two possible starts, cycles n).  Apply node labelling  hamiltonians  rows paths.  Use criterion path_dir  find best orientation rows 2... paths permute rows order increasing path_weight.","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"see overview","code":""},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"C.B. Hurley R.W. Oldford","code":""},{"path":[]},{"path":"https://cbhurley.github.io/PairViz/reference/whpaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs weight decreasing hamiltonian paths — weighted_hpaths","text":"","code":"require(PairViz)  weighted_hpaths(dist(rnorm(6))) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    3    2    4    5    6 #> [2,]    2    1    5    3    6    4 #> [3,]    3    4    1    6    2    5  weighted_hpaths(dist(rnorm(7))) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    5    7    2    4    3    6    1 #> [2,]    5    2    3    7    1    4    6 #> [3,]    5    4    7    6    2    1    3"}]
